https://rlg1133.tistory.com/91
https://velog.io/@sj950902/DJANGO%EC%99%80-WSGI%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90


https://kangbk0120.github.io/articles/2022-02/cgi-wcgi-asgi
https://velog.io/@sj950902/DJANGO%EC%99%80-WSGI%EC%97%90-%EB%8C%80%ED%95%B4-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90

==============================================

Q. 파이썬으로 API를 만드는 도구를 선택하는 최선의 선택은 무엇입니까?
Python으로 API를 생성하기 위한 몇 가지 인기 있는 선택이 있습니다. 다음은 고려할 수 있는 일반적으로 사용되는 세 가지 프레임워크입니다.

Flask: Flask는 Python에서 API를 빌드하기 위한 가볍고 사용하기 쉬운 프레임워크입니다. 간단하고 직관적인 인터페이스를 제공하므로 중소 규모의 프로젝트에 적합합니다. Flask는 유연성과 확장성으로 잘 알려져 있으므로 필요에 따라 API를 사용자 지정하고 확장할 수 있습니다.

Django: Django는 API 생성을 위한 기본 제공 지원을 포함하는 보다 포괄적인 웹 프레임워크입니다. 배터리 포함 접근 방식을 따르며 웹 애플리케이션 개발을 위한 다양한 기능과 도구를 제공합니다. Django는 대규모 프로젝트에 적합하며 강력한 보안 조치와 데이터베이스 상호 작용을 위한 ORM(Object-Relational Mapping)을 제공합니다.

FastAPI: FastAPI는 고성능 및 최신 기능으로 인기를 얻은 비교적 새로운 프레임워크입니다. Python 3.7+ 유형 힌트를 활용하여 자동 데이터 유효성 검사 및 문서 생성을 활성화합니다. FastAPI는 속도와 확장성으로 유명하므로 고성능 API를 구축하는 데 적합한 선택입니다.

세 가지 프레임워크 모두 고유한 강점이 있으며 궁극적으로 특정 요구 사항과 선호도에 따라 달라집니다. Flask 및 FastAPI는 가볍고 더 많은 유연성을 제공하는 반면 Django는 보다 포괄적인 기능 세트를 제공합니다. 문서와 예제를 살펴보고 어느 것이 프로젝트의 요구 사항에 더 잘 맞는지 확인하는 것이 좋습니다.


Q. 차이점, Flask, Django, FastAPI에 대해 알려주세요.
틀림없이! Flask, Django 및 FastAPI의 주요 차이점은 다음과 같습니다.

1.플라스크
가볍고 미니멀한 프레임워크.
API 구축에 대한 간단하고 유연한 접근 방식을 제공합니다.
Django에 비해 기본 제공 기능이 적습니다.
개발자가 응용 프로그램 구조를 설계할 때 더 많은 제어와 자유를 가질 수 있습니다.
고도로 사용자 정의 가능하고 확장 가능합니다.
중소 규모의 프로젝트 및 프로토타입에 적합합니다.
데이터베이스 통합, 인증 및 양식 유효성 검사와 같은 기능을 위한 추가 라이브러리가 필요합니다.
장고:

2. 장고
종합적이고 완전한 기능을 갖춘 웹 프레임워크.
API 생성을 위한 기본 제공 지원을 포함하여 완전한 도구 및 기능 세트를 제공합니다.
"배터리 포함" 원칙에 따라 다양한 일반적인 웹 개발 작업에 대한 솔루션을 제공합니다.
데이터베이스 관리를 위한 ORM, 내장 인증 시스템 및 강력한 관리 인터페이스를 포함합니다.
구성보다 관습을 강조하여 체계적이고 독단적인 접근 방식을 제공합니다.
요구 사항이 복잡하고 개발 일정이 빠른 대규모 프로젝트에 적합합니다.
강력한 보안 조치를 제공하고 활기찬 커뮤니티가 있습니다.

3. FASTAPI
최신 고성능 웹 프레임워크입니다.
자동 데이터 유효성 검사 및 문서 생성을 위해 Python 3.7+ 유형 힌트를 활용합니다.
Starlette 및 Pydantic 라이브러리로 구동되는 비동기 지원으로 인해 뛰어난 성능을 제공합니다.
OAuth, JWT 인증 및 WebSocket과 같은 최신 API 표준을 지원합니다.
OpenAPI 표준을 사용하여 대화형 API 문서를 생성합니다.
확장 가능한 고성능 API를 구축하는 데 적합합니다.
속도, 단순성 및 최신 기능으로 인해 인기를 얻고 있습니다.
전반적으로 Flask 및 FastAPI는 더 많은 유연성을 제공하고 개발자가 더 많은 제어 권한을 가질 수 있는 경량 프레임워크입니다. 소규모 프로젝트 및 사용자 지정이 우선시되는 상황에 적합합니다. 반면 Django는 기능이 내장된 포괄적인 프레임워크이므로 전체 스택 솔루션과 더 빠른 개발 시간이 필요한 대규모 프로젝트에 적합한 선택입니다. FastAPI는 뛰어난 성능과 최신 기능을 제공하므로 확장 가능한 고성능 API를 구축하는 데 탁월한 선택입니다.


Q. Flask 프레임워크에는 몇 개의 연결이 허용됩니까?
Flask에서 허용되는 동시 연결 수는 Flask 애플리케이션을 배포하기 위해 선택한 기본 웹 서버에 의해 결정됩니다. Flask 자체는 연결 수에 특정 제한을 두지 않습니다.
Flask 애플리케이션을 배포할 때 내장 개발 서버(테스트용), Gunicorn, uWSGI와 같은 다양한 웹 서버를 사용하거나 Flask를 Apache 또는 Nginx와 같은 더 큰 웹 서버와 통합할 수도 있습니다. 허용되는 최대 동시 연결 수는 선택한 웹 서버의 구성 및 기능에 따라 다릅니다.
예를 들어 Flask 애플리케이션에 일반적으로 사용되는 웹 서버인 Gunicorn은 일반적으로 작업자 프로세스당 기본 최대 동시 연결을 1000개까지 허용합니다. 그러나 특정 요구 사항 및 서버 설정에 따라 구성 및 조정할 수 있습니다.
동시 연결 수의 확장은 Flask에 의해서만 결정되는 것이 아니라 서버 인프라, 서버 리소스 및 사용 중인 추가 로드 밸런서 또는 프록시 서버에 의해서도 결정된다는 점에 유의해야 합니다.